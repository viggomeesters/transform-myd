import argparse
from pathlib import Path
import sys

from transform_myd.scaffold_excel import generate_column_map_from_excel

def main():
    p = argparse.ArgumentParser(
        description="Maak column_map.yaml o.b.v. Excel headers (+ optioneel template CSV)."
    )
    p.add_argument("-o","--object", required=True, help="Object/familie, bv. M140")
    p.add_argument("-v","--variant", required=True, help="Variant, bv. BNKA")
    p.add_argument("-x","--excel", required=True, help="Pad naar bron-Excel (headers).")
    p.add_argument("--sheet", default=None, help="Sheet name of index (default: eerste sheet).")
    p.add_argument("--header-row", type=int, default=1, help="Header rij (1-based, default=1).")
    p.add_argument("--template-csv", default=None, help="Optioneel: SAP template CSV om targets af te leiden.")
    p.add_argument("--mode", choices=["identity","template","fuzzy"], default="identity",
                   help="identity=output==source; template=map via template headers; fuzzy=zelfde als template (voor nu).")
    p.add_argument("-c","--config-root", default="config", help="Config root (default: ./config)")
    p.add_argument("--force", action="store_true", help="Overschrijf bestaande column_map.yaml")
    args = p.parse_args()

    cfg_root = Path(args.config_root)
    out_dir = cfg_root / args.object / args.variant
    out_dir.mkdir(parents=True, exist_ok=True)
    out_path = out_dir / "column_map.yaml"

    mapping, notes = generate_column_map_from_excel(
        excel_path=args.excel,
        sheet=args.sheet,
        header_row=args.header_row,
        template_csv=args.template_csv,
        mode=args.mode
    )

    if out_path.exists() and not args.force:
        print(f"✗ Bestaat al: {out_path}  (gebruik --force om te overschrijven)")
        sys.exit(1)

    # Schrijf YAML (top-level mapping, met commentaarblokken)
    from io import StringIO
    import yaml
    buf = StringIO()
    buf.write("# generated by scaffold_from_excel\n")
    buf.write(f"# source: {args.excel}\n")
    if args.template_csv:
        buf.write(f"# template: {args.template_csv}\n")
    yaml.safe_dump(mapping, buf, sort_keys=True, allow_unicode=True)
    if notes.get("unmatched_targets"):
        buf.write("\n# Unmatched targets (in template maar geen match):\n")
        for t in notes["unmatched_targets"]:
            buf.write(f"#   - {t}\n")
    if notes.get("unmatched_sources"):
        buf.write("\n# Unmatched sources (in Excel maar geen match op template):\n")
        for s in notes["unmatched_sources"]:
            buf.write(f"#   - {s}\n")
    out_path.write_text(buf.getvalue(), encoding="utf-8")

    print(f"✓ column_map.yaml geschreven → {out_path}")
    if args.template_csv:
        print(f"• Matches: {notes.get('matched',0)}  | "
              f"unmatched targets: {len(notes.get('unmatched_targets',[]))} | "
              f"unmatched sources: {len(notes.get('unmatched_sources',[]))}")

if __name__ == "__main__":
    main()
